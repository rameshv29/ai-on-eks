version: '3.8'

services:
  # Mock DynamoDB for local development
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal"
    volumes:
      - dynamodb_data:/home/dynamodblocal
    networks:
      - multi-agent-network

  # Orchestrator agent
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    ports:
      - "${ORCHESTRATOR_PORT:-3000}:3000"  # FastAPI
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_ENDPOINT_URL=http://dynamodb-local:8000
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-us.anthropic.claude-3-7-sonnet-20250219-v1:0}
      - WEATHER_A2A_PORT=${WEATHER_A2A_PORT:-9000}
      - CITYMAPPER_A2A_PORT=${CITYMAPPER_A2A_PORT:-9001}
      - WEATHER_A2A_HOST=weather
      - CITYMAPPER_A2A_HOST=citymapper
      - DYNAMODB_AGENT_STATE_TABLE_NAME=${DYNAMODB_AGENT_STATE_TABLE_NAME:-agent-state-table}
      - DEBUG=${DEBUG:-1}
    volumes:
      - ~/.aws:/app/.aws:ro
    networks:
      - multi-agent-network
    depends_on:
      - dynamodb-local

  # Weather agent
  weather:
    build:
      context: ./weather
      dockerfile: Dockerfile
    ports:
      - "${WEATHER_FASTAPI_PORT:-3001}:3000"  # FastAPI
      - "${WEATHER_A2A_PORT:-9000}:9000"      # A2A
      - "${WEATHER_MCP_PORT:-8080}:8080"      # MCP
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_ENDPOINT_URL=http://dynamodb-local:8000
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-us.anthropic.claude-3-7-sonnet-20250219-v1:0}
      - A2A_PORT=${WEATHER_A2A_PORT:-9000}
      - MCP_PORT=${WEATHER_MCP_PORT:-8080}
      - FASTAPI_PORT=3000
      - DYNAMODB_AGENT_STATE_TABLE_NAME=${DYNAMODB_AGENT_STATE_TABLE_NAME:-agent-state-table}
      - DEBUG=${DEBUG:-1}
    volumes:
      - ~/.aws:/app/.aws:ro
    networks:
      - multi-agent-network
    depends_on:
      - dynamodb-local

  # Citymapper agent
  citymapper:
    build:
      context: ./citymapper
      dockerfile: Dockerfile
    ports:
      - "${CITYMAPPER_FASTAPI_PORT:-3002}:3000"  # FastAPI
      - "${CITYMAPPER_A2A_PORT:-9001}:9000"      # A2A
      - "${CITYMAPPER_MCP_PORT:-8081}:8080"      # MCP
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_ENDPOINT_URL=http://dynamodb-local:8000
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-us.anthropic.claude-3-7-sonnet-20250219-v1:0}
      - A2A_PORT=${CITYMAPPER_A2A_PORT:-9001}
      - MCP_PORT=${CITYMAPPER_MCP_PORT:-8081}
      - FASTAPI_PORT=3000
      - DYNAMODB_AGENT_STATE_TABLE_NAME=${DYNAMODB_AGENT_STATE_TABLE_NAME:-agent-state-table}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-travel-plans-bucket}
      - DEBUG=${DEBUG:-1}
    volumes:
      - ~/.aws:/app/.aws:ro
    networks:
      - multi-agent-network
    depends_on:
      - dynamodb-local

volumes:
  dynamodb_data:

networks:
  multi-agent-network:
    driver: bridge
